// Package embed provides yaml discovery with embed actions definition.
package embed

import (
	"fmt"
	"path/filepath"

	"github.com/launchrctl/launchr/internal/launchr"
	"github.com/launchrctl/launchr/pkg/action"
)

func init() {
	launchr.RegisterPlugin(&Plugin{})
}

// Plugin is a [launchr.Plugin] to discover actions defined in yaml.
type Plugin struct{}

// PluginInfo implements [launchr.Plugin] interface.
func (p Plugin) PluginInfo() launchr.PluginInfo {
	return launchr.PluginInfo{}
}

// Generate implements [launchr.GeneratePlugin] interface.
func (p Plugin) Generate(buildPath string, workDir string) error {
	// Generate actions tar.
	launchr.Term().Info().Println("Discovering actions")
	actions, err := createActionTar(workDir, filepath.Join(buildPath, "actions.tar.gz"))
	if err != nil {
		return err
	}
	list := ""
	for i, a := range actions {
		list = fmt.Sprintf("%s\n%d. %s", list, i+1, a.ID)
	}
	launchr.Term().Info().Printfln("Discovered:\n%s", list)
	launchr.Term().Info().Println("Generating embed actions go file")
	tpl := launchr.Template{
		Tmpl: pluginTemplate,
		Data: nil,
	}
	return tpl.WriteFile(filepath.Join(buildPath, "yamldiscovery.embed.gen.go"))
}

// ActionsGenPlugin stores embed actions and sets them on app launch with OnAppInit function.
// It is used in the generated file provided by current package [Plugin]
type ActionsGenPlugin struct {
	TarGz []byte
}

// PluginInfo implements [launchr.Plugin] interface.
func (p *ActionsGenPlugin) PluginInfo() launchr.PluginInfo {
	return launchr.PluginInfo{}
}

// OnAppInit implements [launchr.Plugin] interface.
func (p *ActionsGenPlugin) OnAppInit(app launchr.App) error {
	fs, err := UntarFsBytes(p.TarGz)
	if err == nil {
		app.RegisterFS(action.NewDiscoveryFS(fs, app.GetWD()))
	}
	return err
}

const pluginTemplate = `// Code generated by github.com/launchrctl/launchr/plugins/yamldiscovery/embed. DO NOT EDIT.
package main

import (
	_ "embed"

	"github.com/launchrctl/launchr"
	yamlembed "github.com/launchrctl/launchr/plugins/yamldiscovery/embed"
)

//go:embed actions.tar.gz
var actionsTarGz []byte

func init() {
	launchr.RegisterPlugin(&yamlembed.ActionsGenPlugin{
		TarGz: actionsTarGz,
	})
}
`
