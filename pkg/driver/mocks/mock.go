// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/launchrctl/launchr/pkg/driver/mocks (interfaces: ContainerRuntime)
//
// Generated by this command:
//
//	mockgen -destination=mock.go -package=mocks . ContainerRuntime
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"

	driver "github.com/launchrctl/launchr/pkg/driver"
	gomock "go.uber.org/mock/gomock"
)

// MockContainerRuntime is a mock of ContainerRuntime interface.
type MockContainerRuntime struct {
	ctrl     *gomock.Controller
	recorder *MockContainerRuntimeMockRecorder
	isgomock struct{}
}

// MockContainerRuntimeMockRecorder is the mock recorder for MockContainerRuntime.
type MockContainerRuntimeMockRecorder struct {
	mock *MockContainerRuntime
}

// NewMockContainerRuntime creates a new mock instance.
func NewMockContainerRuntime(ctrl *gomock.Controller) *MockContainerRuntime {
	mock := &MockContainerRuntime{ctrl: ctrl}
	mock.recorder = &MockContainerRuntimeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContainerRuntime) EXPECT() *MockContainerRuntimeMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockContainerRuntime) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockContainerRuntimeMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockContainerRuntime)(nil).Close))
}

// ContainerCreate mocks base method.
func (m *MockContainerRuntime) ContainerCreate(ctx context.Context, opts driver.ContainerDefinition) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerCreate", ctx, opts)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerCreate indicates an expected call of ContainerCreate.
func (mr *MockContainerRuntimeMockRecorder) ContainerCreate(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerCreate", reflect.TypeOf((*MockContainerRuntime)(nil).ContainerCreate), ctx, opts)
}

// ContainerKill mocks base method.
func (m *MockContainerRuntime) ContainerKill(ctx context.Context, cid, signal string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerKill", ctx, cid, signal)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerKill indicates an expected call of ContainerKill.
func (mr *MockContainerRuntimeMockRecorder) ContainerKill(ctx, cid, signal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerKill", reflect.TypeOf((*MockContainerRuntime)(nil).ContainerKill), ctx, cid, signal)
}

// ContainerList mocks base method.
func (m *MockContainerRuntime) ContainerList(ctx context.Context, opts driver.ContainerListOptions) []driver.ContainerListResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerList", ctx, opts)
	ret0, _ := ret[0].([]driver.ContainerListResult)
	return ret0
}

// ContainerList indicates an expected call of ContainerList.
func (mr *MockContainerRuntimeMockRecorder) ContainerList(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerList", reflect.TypeOf((*MockContainerRuntime)(nil).ContainerList), ctx, opts)
}

// ContainerRemove mocks base method.
func (m *MockContainerRuntime) ContainerRemove(ctx context.Context, cid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerRemove", ctx, cid)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerRemove indicates an expected call of ContainerRemove.
func (mr *MockContainerRuntimeMockRecorder) ContainerRemove(ctx, cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerRemove", reflect.TypeOf((*MockContainerRuntime)(nil).ContainerRemove), ctx, cid)
}

// ContainerStart mocks base method.
func (m *MockContainerRuntime) ContainerStart(ctx context.Context, cid string, opts driver.ContainerDefinition) (<-chan int, *driver.ContainerInOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerStart", ctx, cid, opts)
	ret0, _ := ret[0].(<-chan int)
	ret1, _ := ret[1].(*driver.ContainerInOut)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ContainerStart indicates an expected call of ContainerStart.
func (mr *MockContainerRuntimeMockRecorder) ContainerStart(ctx, cid, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerStart", reflect.TypeOf((*MockContainerRuntime)(nil).ContainerStart), ctx, cid, opts)
}

// ContainerStatPath mocks base method.
func (m *MockContainerRuntime) ContainerStatPath(ctx context.Context, cid, path string) (driver.ContainerPathStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerStatPath", ctx, cid, path)
	ret0, _ := ret[0].(driver.ContainerPathStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerStatPath indicates an expected call of ContainerStatPath.
func (mr *MockContainerRuntimeMockRecorder) ContainerStatPath(ctx, cid, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerStatPath", reflect.TypeOf((*MockContainerRuntime)(nil).ContainerStatPath), ctx, cid, path)
}

// ContainerStop mocks base method.
func (m *MockContainerRuntime) ContainerStop(ctx context.Context, cid string, opts driver.ContainerStopOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerStop", ctx, cid, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerStop indicates an expected call of ContainerStop.
func (mr *MockContainerRuntimeMockRecorder) ContainerStop(ctx, cid, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerStop", reflect.TypeOf((*MockContainerRuntime)(nil).ContainerStop), ctx, cid, opts)
}

// CopyFromContainer mocks base method.
func (m *MockContainerRuntime) CopyFromContainer(ctx context.Context, cid, srcPath string) (io.ReadCloser, driver.ContainerPathStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFromContainer", ctx, cid, srcPath)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(driver.ContainerPathStat)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CopyFromContainer indicates an expected call of CopyFromContainer.
func (mr *MockContainerRuntimeMockRecorder) CopyFromContainer(ctx, cid, srcPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFromContainer", reflect.TypeOf((*MockContainerRuntime)(nil).CopyFromContainer), ctx, cid, srcPath)
}

// CopyToContainer mocks base method.
func (m *MockContainerRuntime) CopyToContainer(ctx context.Context, cid, path string, content io.Reader, opts driver.CopyToContainerOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyToContainer", ctx, cid, path, content, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyToContainer indicates an expected call of CopyToContainer.
func (mr *MockContainerRuntimeMockRecorder) CopyToContainer(ctx, cid, path, content, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyToContainer", reflect.TypeOf((*MockContainerRuntime)(nil).CopyToContainer), ctx, cid, path, content, opts)
}

// ImageEnsure mocks base method.
func (m *MockContainerRuntime) ImageEnsure(ctx context.Context, opts driver.ImageOptions) (*driver.ImageStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageEnsure", ctx, opts)
	ret0, _ := ret[0].(*driver.ImageStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageEnsure indicates an expected call of ImageEnsure.
func (mr *MockContainerRuntimeMockRecorder) ImageEnsure(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageEnsure", reflect.TypeOf((*MockContainerRuntime)(nil).ImageEnsure), ctx, opts)
}

// ImageRemove mocks base method.
func (m *MockContainerRuntime) ImageRemove(ctx context.Context, image string, opts driver.ImageRemoveOptions) (*driver.ImageRemoveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageRemove", ctx, image, opts)
	ret0, _ := ret[0].(*driver.ImageRemoveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageRemove indicates an expected call of ImageRemove.
func (mr *MockContainerRuntimeMockRecorder) ImageRemove(ctx, image, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageRemove", reflect.TypeOf((*MockContainerRuntime)(nil).ImageRemove), ctx, image, opts)
}

// Info mocks base method.
func (m *MockContainerRuntime) Info(ctx context.Context) (driver.SystemInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", ctx)
	ret0, _ := ret[0].(driver.SystemInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockContainerRuntimeMockRecorder) Info(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockContainerRuntime)(nil).Info), ctx)
}

// IsSELinuxSupported mocks base method.
func (m *MockContainerRuntime) IsSELinuxSupported(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSELinuxSupported", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSELinuxSupported indicates an expected call of IsSELinuxSupported.
func (mr *MockContainerRuntimeMockRecorder) IsSELinuxSupported(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSELinuxSupported", reflect.TypeOf((*MockContainerRuntime)(nil).IsSELinuxSupported), ctx)
}

// SetRuntimeFlags mocks base method.
func (m *MockContainerRuntime) SetRuntimeFlags(flags driver.RuntimeFlags) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRuntimeFlags", flags)
}

// SetRuntimeFlags indicates an expected call of SetRuntimeFlags.
func (mr *MockContainerRuntimeMockRecorder) SetRuntimeFlags(flags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRuntimeFlags", reflect.TypeOf((*MockContainerRuntime)(nil).SetRuntimeFlags), flags)
}
