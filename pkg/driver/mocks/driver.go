// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/launchrctl/launchr/pkg/driver (interfaces: ContainerRunner)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	driver "github.com/launchrctl/launchr/pkg/driver"
	types "github.com/launchrctl/launchr/pkg/types"
	types0 "github.com/moby/moby/api/types"
)

// MockContainerRunner is a mock of ContainerRunner interface.
type MockContainerRunner struct {
	ctrl     *gomock.Controller
	recorder *MockContainerRunnerMockRecorder
}

// MockContainerRunnerMockRecorder is the mock recorder for MockContainerRunner.
type MockContainerRunnerMockRecorder struct {
	mock *MockContainerRunner
}

// NewMockContainerRunner creates a new mock instance.
func NewMockContainerRunner(ctrl *gomock.Controller) *MockContainerRunner {
	mock := &MockContainerRunner{ctrl: ctrl}
	mock.recorder = &MockContainerRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContainerRunner) EXPECT() *MockContainerRunnerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockContainerRunner) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockContainerRunnerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockContainerRunner)(nil).Close))
}

// ContainerAttach mocks base method.
func (m *MockContainerRunner) ContainerAttach(arg0 context.Context, arg1 string, arg2 types0.ContainerAttachOptions) (*driver.ContainerInOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerAttach", arg0, arg1, arg2)
	ret0, _ := ret[0].(*driver.ContainerInOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerAttach indicates an expected call of ContainerAttach.
func (mr *MockContainerRunnerMockRecorder) ContainerAttach(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerAttach", reflect.TypeOf((*MockContainerRunner)(nil).ContainerAttach), arg0, arg1, arg2)
}

// ContainerCreate mocks base method.
func (m *MockContainerRunner) ContainerCreate(arg0 context.Context, arg1 types.ContainerCreateOptions) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerCreate", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerCreate indicates an expected call of ContainerCreate.
func (mr *MockContainerRunnerMockRecorder) ContainerCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerCreate", reflect.TypeOf((*MockContainerRunner)(nil).ContainerCreate), arg0, arg1)
}

// ContainerExecResize mocks base method.
func (m *MockContainerRunner) ContainerExecResize(arg0 context.Context, arg1 string, arg2 types0.ResizeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerExecResize", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerExecResize indicates an expected call of ContainerExecResize.
func (mr *MockContainerRunnerMockRecorder) ContainerExecResize(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerExecResize", reflect.TypeOf((*MockContainerRunner)(nil).ContainerExecResize), arg0, arg1, arg2)
}

// ContainerKill mocks base method.
func (m *MockContainerRunner) ContainerKill(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerKill", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerKill indicates an expected call of ContainerKill.
func (mr *MockContainerRunnerMockRecorder) ContainerKill(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerKill", reflect.TypeOf((*MockContainerRunner)(nil).ContainerKill), arg0, arg1, arg2)
}

// ContainerList mocks base method.
func (m *MockContainerRunner) ContainerList(arg0 context.Context, arg1 types.ContainerListOptions) []types.ContainerListResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerList", arg0, arg1)
	ret0, _ := ret[0].([]types.ContainerListResult)
	return ret0
}

// ContainerList indicates an expected call of ContainerList.
func (mr *MockContainerRunnerMockRecorder) ContainerList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerList", reflect.TypeOf((*MockContainerRunner)(nil).ContainerList), arg0, arg1)
}

// ContainerRemove mocks base method.
func (m *MockContainerRunner) ContainerRemove(arg0 context.Context, arg1 string, arg2 types0.ContainerRemoveOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerRemove", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerRemove indicates an expected call of ContainerRemove.
func (mr *MockContainerRunnerMockRecorder) ContainerRemove(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerRemove", reflect.TypeOf((*MockContainerRunner)(nil).ContainerRemove), arg0, arg1, arg2)
}

// ContainerResize mocks base method.
func (m *MockContainerRunner) ContainerResize(arg0 context.Context, arg1 string, arg2 types0.ResizeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerResize", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerResize indicates an expected call of ContainerResize.
func (mr *MockContainerRunnerMockRecorder) ContainerResize(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerResize", reflect.TypeOf((*MockContainerRunner)(nil).ContainerResize), arg0, arg1, arg2)
}

// ContainerStart mocks base method.
func (m *MockContainerRunner) ContainerStart(arg0 context.Context, arg1 string, arg2 types.ContainerStartOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerStart", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerStart indicates an expected call of ContainerStart.
func (mr *MockContainerRunnerMockRecorder) ContainerStart(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerStart", reflect.TypeOf((*MockContainerRunner)(nil).ContainerStart), arg0, arg1, arg2)
}

// ContainerStatPath mocks base method.
func (m *MockContainerRunner) ContainerStatPath(arg0 context.Context, arg1, arg2 string) (types0.ContainerPathStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerStatPath", arg0, arg1, arg2)
	ret0, _ := ret[0].(types0.ContainerPathStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerStatPath indicates an expected call of ContainerStatPath.
func (mr *MockContainerRunnerMockRecorder) ContainerStatPath(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerStatPath", reflect.TypeOf((*MockContainerRunner)(nil).ContainerStatPath), arg0, arg1, arg2)
}

// ContainerStop mocks base method.
func (m *MockContainerRunner) ContainerStop(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerStop", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerStop indicates an expected call of ContainerStop.
func (mr *MockContainerRunnerMockRecorder) ContainerStop(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerStop", reflect.TypeOf((*MockContainerRunner)(nil).ContainerStop), arg0, arg1)
}

// ContainerWait mocks base method.
func (m *MockContainerRunner) ContainerWait(arg0 context.Context, arg1 string, arg2 types.ContainerWaitOptions) (<-chan types.ContainerWaitResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerWait", arg0, arg1, arg2)
	ret0, _ := ret[0].(<-chan types.ContainerWaitResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// ContainerWait indicates an expected call of ContainerWait.
func (mr *MockContainerRunnerMockRecorder) ContainerWait(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerWait", reflect.TypeOf((*MockContainerRunner)(nil).ContainerWait), arg0, arg1, arg2)
}

// CopyFromContainer mocks base method.
func (m *MockContainerRunner) CopyFromContainer(arg0 context.Context, arg1, arg2 string) (io.ReadCloser, types0.ContainerPathStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFromContainer", arg0, arg1, arg2)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(types0.ContainerPathStat)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CopyFromContainer indicates an expected call of CopyFromContainer.
func (mr *MockContainerRunnerMockRecorder) CopyFromContainer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFromContainer", reflect.TypeOf((*MockContainerRunner)(nil).CopyFromContainer), arg0, arg1, arg2)
}

// CopyToContainer mocks base method.
func (m *MockContainerRunner) CopyToContainer(arg0 context.Context, arg1, arg2 string, arg3 io.Reader, arg4 types0.CopyToContainerOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyToContainer", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyToContainer indicates an expected call of CopyToContainer.
func (mr *MockContainerRunnerMockRecorder) CopyToContainer(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyToContainer", reflect.TypeOf((*MockContainerRunner)(nil).CopyToContainer), arg0, arg1, arg2, arg3, arg4)
}

// ImageEnsure mocks base method.
func (m *MockContainerRunner) ImageEnsure(arg0 context.Context, arg1 types.ImageOptions) (*types.ImageStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageEnsure", arg0, arg1)
	ret0, _ := ret[0].(*types.ImageStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageEnsure indicates an expected call of ImageEnsure.
func (mr *MockContainerRunnerMockRecorder) ImageEnsure(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageEnsure", reflect.TypeOf((*MockContainerRunner)(nil).ImageEnsure), arg0, arg1)
}

// ImageRemove mocks base method.
func (m *MockContainerRunner) ImageRemove(arg0 context.Context, arg1 string, arg2 types0.ImageRemoveOptions) (*types.ImageRemoveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageRemove", arg0, arg1, arg2)
	ret0, _ := ret[0].(*types.ImageRemoveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageRemove indicates an expected call of ImageRemove.
func (mr *MockContainerRunnerMockRecorder) ImageRemove(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageRemove", reflect.TypeOf((*MockContainerRunner)(nil).ImageRemove), arg0, arg1, arg2)
}
